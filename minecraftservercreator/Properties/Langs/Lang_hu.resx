<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="adat_lekerd" xml:space="preserve">
    <value>Adatok lekérdezése</value>
  </data>
  <data name="agy" xml:space="preserve">
    <value>Mi legyen a szervernek az "agya"?</value>
  </data>
  <data name="agy_form" xml:space="preserve">
    <value>Az úgynevezett "agy", a szerver egyik legfontosabb alkotóeleme.

Ebből itt te kettő félét találsz. A Spigotot és a Bukkitot.

Ezek között a legfőbb különbség, hogy a Spigot tudja futtatni a 
bukkitos kiegészítőket is, viszont a Bukkit nem. 

Ennek ellenére még sokan vannak akik  bukkitot használnak. 

Hogyha esetleg egy olyan szervert szeretnél, ahol több féle
 játékmód van, azaz több szerver fut egyszerre akkor ez csak a Spigot-al
oldható meg ebben az alkalmazásban. Ez a funkció majd az 1.6-s verzióban
lesz elérhető.

Én neked a Spigot-t ajánlom.</value>
  </data>
  <data name="already" xml:space="preserve">
    <value>Ilyen nevű szerver már létezik! Adj meg egy másik nevet!</value>
  </data>
  <data name="another_agy" xml:space="preserve">
    <value>(Az egyéb agyakon még dolgozunk!)</value>
  </data>
  <data name="bukkit_not_avaliable" xml:space="preserve">
    <value>A bukkit még nem elérhető!</value>
  </data>
  <data name="dont_see" xml:space="preserve">
    <value>(Ha valamilyen verziót nem látsz, akkor abban a verzióban még nem lehetséges szervert készíteni)</value>
  </data>
  <data name="enter_srv_name" xml:space="preserve">
    <value>Írd be a szervered nevét!</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Hiba</value>
  </data>
  <data name="fill_all_fields" xml:space="preserve">
    <value>Töltsd ki az összes mezőt!</value>
  </data>
  <data name="f_bele" xml:space="preserve">
    <value>Fogjunk bele!</value>
  </data>
  <data name="not_recommented_versions" xml:space="preserve">
    <value>Nem ajánlott verziók: 1.16.1</value>
  </data>
  <data name="players" xml:space="preserve">
    <value>Játékosok</value>
  </data>
  <data name="plugins" xml:space="preserve">
    <value>Pluginok</value>
  </data>
  <data name="recommented_versions" xml:space="preserve">
    <value>Ajánlott verziók: 1.14.4
                          1.14.3
                          1.14.2
                          1.14
                          1.12.2
                          1.12</value>
  </data>
  <data name="rec_settings" xml:space="preserve">
    <value>Ajánlott beállítások:</value>
  </data>
  <data name="select" xml:space="preserve">
    <value>Válaszd ki!</value>
  </data>
  <data name="spec_car" xml:space="preserve">
    <value>(Lehetőleg speciális karakterek nélküli nevet adj meg)</value>
  </data>
  <data name="s_name" xml:space="preserve">
    <value>Mi legyen a szerver neve?</value>
  </data>
  <data name="tovabb" xml:space="preserve">
    <value>Tovább</value>
  </data>
  <data name="udv" xml:space="preserve">
    <value>Üdvözöllek a minecraft szerver készítőben! 
A szerver elkészítéséhez a telepítő fel fog tenni
kérdéseket. Ha valamelyik kérdésre esetleg
nem tudod a választ, akkor kattints a
kérdés melletti kérdőjelre</value>
  </data>
  <data name="under" xml:space="preserve">
    <value>1.12 alattiak</value>
  </data>
  <data name="verzio_form" xml:space="preserve">
    <value>Válassz egy olyan verziót ami nem túl régi, de nem is nagyon új. 
Ha nagyon újat választasz, sok kiegészítő (un. plugin) nem lesz elérhető. 
Viszont ez a veszély akkor is előáll, ha nagyon régit választasz.</value>
  </data>
  <data name="what_version" xml:space="preserve">
    <value>Milyen verzióban szeretnél játszani?</value>
  </data>
</root>